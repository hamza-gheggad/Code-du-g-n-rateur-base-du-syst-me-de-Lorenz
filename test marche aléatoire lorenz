import numpy as np
def fact(n):
    if n<2:
        return 1
    else:
        return n*fact(n-1)
combin = lambda n,k: fact(n)//(fact(k)*fact(n-k))

k=100

def P(k,m,n):
    P=0
    if (abs(m)+abs(n)>k) or ((abs(m)+abs(n)+k)%2 !=0):
        return 0
    else :
        h=(k-abs(m)-abs(n))/2
        for i in range(h+1):
            P+=combin(k,abs(m)+i)*combin(k-abs(m)-i,i)*combin(k-abs(m)-2*i,(k-abs(m)-abs(n)-2*i)/2)
        return (1/4**k)*P
 


lambda_1=8
lambda_2=-16
lambda_3=-1
tau = 0.1
A=np.array([[lambda_1,0,0],
            [0,lambda_2,0], 
            [0,0,lambda_3]])
B=np.array([[0,0,-1], 
            [0,0,-1], 
            [1,tau,0]])
c=np.array([1,-1,0])

def F(z,t):
    return A.dot(z) + c.dot(z)*B.dot(z)

z=np.array([1.5,1.3,1])
h=0
def nextRandLorenz():
    global z
    global h
    z=z+ 0.00001*F(z,h)
    v=(z[0]+z[1]+z[2])*10**(14)
    k=int(v)%256
    h+=0.00001
    return k/256



H=[]
Z=[]
for n in range(-k,k+1):
    for m in range(-k,k+1):
        H.append((n,m))
        Z.append([(n,m),0])
        
s=0

for i in range(100):
    x,y=0,0
    for j in range(k+1):
        s=nextRandLorenz()
        if 0<=s<0.25:
            x+=-1
        elif 0.25<=s<0.5:
            x+=1
        elif 0.5<=s<0.75:
            y+=1
        else :
            y+=-1
        Z[H.index((x,y))][1]+=1
