import numpy as np

lambda_1=8
lambda_2=-16
lambda_3=-1
tau = 0.1
A=np.array([[lambda_1,0,0],
            [0,lambda_2,0], 
            [0,0,lambda_3]])
B=np.array([[0,0,-1], 
            [0,0,-1], 
            [1,tau,0]])
c=np.array([1,-1,0])

def F(z,t):
    return A.dot(z) + c.dot(z)*B.dot(z)

z=np.array([1,1,1])
h=0
def nextRandLorenz():
    global z
    global h
    z=z+ 0.00001*F(z,h)
    v=(z[0]+z[1]+z[2])*10**(14)
    k=int(v)%256
    h+=0.00001
    return k/256

def lancee_de():
    i= nextRandLorenz()
    if 0<=i<0.16666:
        return 0
    elif 0.16666<=i<2*0.16666:
        return 1
    elif 2*0.16666<=i<3*0.16666:
        return 2
    elif 3*0.16666<=i<4*0.16666:
        return 3
    elif 4*0.16666<=i<5*0.16666:
        return 4
    else :
        return 5
for i in range(10):
    print(nextRandLorenz())
    
    
import matplotlib.pyplot as plt
import matplotlib.animation as animation

SIDES = 6
HEIGHT = 100

def update_results(results):
    die_toss = lancee_de()
    return [x + (1 if i == die_toss else 0) for i, x in enumerate(results)]

def plot_points(ps):
    plt.scatter(*zip(*ps))

def animate(frameno):
    global x
    x = update_results(x)
    n, _ = np.histogram(x, SIDES)
    n = x
    for rect, h in zip(patches, n):
        rect.set_height(h)
    print(x, max(x) / float(min(x)))
    return patches

x = [ 1 for _ in range(SIDES) ]

fig, ax = plt.subplots()
n, bins, patches = plt.hist(x, SIDES, normed=1, facecolor='green', alpha=0.75)

frames = 500
ani = animation.FuncAnimation(fig, animate)

axes = plt.gca()
axes.set_ylim([0, HEIGHT])

plt.show()

plt.show()

for i in range(1000):
    plt.bar(range(SIDES), x)
    x =update_results(x)
    print(x)
    if i==999:
        plt.show()
        plt.clf()
